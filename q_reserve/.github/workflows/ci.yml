name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: q_reserve_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "DATABASE_URL_TEST=postgresql://postgres:postgres@localhost:5432/q_reserve_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "WTF_CSRF_SECRET_KEY=test-csrf-key" >> $GITHUB_ENV
    
    - name: Run linting
      run: |
        # Python linting
        flake8 apps core --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 apps core --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        # Import sorting
        isort --check-only --diff apps core
        
        # Code formatting
        black --check apps core
    
    - name: Run security checks
      run: |
        # Security vulnerability scanning
        pip install safety bandit
        safety check
        bandit -r apps core -f json -o bandit-report.json
    
    - name: Initialize test database
      run: |
        python scripts/init_db.py
      env:
        FLASK_ENV: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/q_reserve_test
    
    - name: Run tests
      run: |
        pytest --cov=apps --cov=core --cov-report=xml --cov-report=html
      env:
        FLASK_ENV: testing
        DATABASE_URL_TEST: postgresql://postgres:postgres@localhost:5432/q_reserve_test
        REDIS_URL: redis://localhost:6379/0
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/q-reserve:latest
          ${{ secrets.DOCKER_USERNAME }}/q-reserve:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    # Example deployment to Render
    - name: Deploy to Render
      if: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
    
    # Example deployment to Railway
    - name: Deploy to Railway
      if: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up
    
    # Example deployment to DigitalOcean
    - name: Deploy to DigitalOcean
      if: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      uses: digitalocean/app_action@v1.1.5
      with:
        app_name: q-reserve
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3